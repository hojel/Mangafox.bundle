RE_PAGES = Regex('of (\d+)')
#RE_IMAGE_URL = Regex('<img src="([^"]*)" onerror')
RE_IMAGE_URL = Regex("onerror=\"this.src='([^']*)'\"")

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	#try:
	#	page = HTTP.Request(url, headers=headers).content
	#except:
	#	raise Ex.MediaNotAvailable

	album = PhotoAlbumObject(key=Callback(GetPhotos, url=url))
	return album

def GetPhotos(url):
	oc = ObjectContainer()
	
	raw = HTTP.Request(url).content
	pages = int( RE_PAGES.search(raw).group(1) )
	token = url.rsplit('/', 1)
	for page in range(1,pages+1):
		page_url = token[0]+"/%d.html" % page
		raw = HTTP.Request(page_url).content
		img_url = RE_IMAGE_URL.search(raw).group(1)
		oc.add( PhotoObject(key=img_url, title=str(page), thumb=None) )
	
	return oc
	
####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = Callback(GetPhotos, url=url)
		)
	]
